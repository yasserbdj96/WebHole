{
    "package-name": "python-flask",
    "command-0": "print('webhole-python-flask-by-yasserbdj96-:)')",
    "command-0-output": "webhole-python-flask-by-yasserbdj96-:)",
    "auto-call":{
        "DIRECTORY_SEPARATOR": "import os; print(repr(os.sep)[1:-1])",
        "SCRIPT_FILENAME":"import os;print(os.path.dirname(os.path.abspath(__file__)))",
        "file_content":"",
        "error_emoji": "\u274c",
        "success_emoji": "\u2705",
        "warning_emoji": "\u26a0"
    },
    "start": "",
    "end": "",
    "commands": {
        "ls": {
            "command-file": "ls.py",
            "command-arguments": {"path":"__path__"},
            "command-description": "[ls] ‚Üí List the contents of the current directory.",
            "command-emoji":"üìÇ",
            "action": {
                "type": "function",
                "handler": "con.fn_listsort(con.connect(cli='ls', path=pwd, **c_params), separator=' '*9)"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "tree": {
            "command-file": "tree.py",
            "command-arguments": {"path":"__path__"},
            "command-description": "[tree] ‚Üí Display the directory structure in a tree view",
            "command-emoji":"üå≤",
             "action": {
                "type": "function",
                "handler": "con.connect(cli='tree', path=pwd, **c_params)"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "tree -f": {
            "command-file": "tree_f.py",
            "command-arguments": {"path":"__path__"},
            "command-description": "[tree -f] ‚Üí Display the directory structure in a tree view with full file paths",
            "command-emoji":"üå≤",
            "action": {
                "type": "function",
                "handler": "con.fn_listsort(con.connect(cli='tree -f', path=pwd, cf=False, **c_params), separator=' '*9)"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": true,
            "with_function": false
        },
        "cd": {
            "command-file": "cd.py",
            "command-arguments": {"path":"__path__"},
            "command-return":"SCRIPT_FILENAME",
            "command-default": {"old_path":"{self.SCRIPT_FILENAME}"},
            "command-description": "[cd] [PATH] ‚Üí Change the current working directory",
            "command-emoji":"üìÅ",
            "action": {
                "type": "function",
                "handler": "con.connect(cli='cd', path=cmd_parts, **c_params)"
            },
            "parameters": {},
            "output": false,
            "post_execute": "pwd",
            "return_list": false,
            "with_function": false
        },
        "cat":{
            "command-file": "cat.py",
            "command-arguments": {"path":"__path__"},
            "command-return":"{self.file_content}",
            "command-default": {"old_path":"{self.SCRIPT_FILENAME}"},
            "command-description": "[cat] [PATH] ‚Üí Display the contents of a file",
            "command-emoji":"üìÑ",
            "action": {
                "type": "function",
                "handler": "con.connect(cli='cat', path=cmd_parts, **c_params)"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "edit":{
            "command-file": "edit.py",
            "command-arguments": {"path":"__path__","new_b64_text":"__new_b64_text__"},
            "command-default": {"old_path":"{self.SCRIPT_FILENAME}"},
            "command-description": "[edit] [PATH] ‚Üí Open and edit a file",
            "command-emoji":"‚úèÔ∏è",
             "action": {
                "type": "function",
                "handler": "con.connect(cli='edit', path=pwd.strip()+con.DIRECTORY_SEPARATOR.strip()+cmd_parts.strip(), new_b64_text=base64.b64encode(con.editor(con.connect(cli='cat', path=cmd_parts, **c_params)).encode('utf-8')).decode('utf-8'))"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "down":{
            "command-file": "cat.py",
            "command-arguments": {"path":"__path__"},
            "command-default": {"old_path":"{self.SCRIPT_FILENAME}"},
            "command-description": "[down] [SRC] [DST] ‚Üí Download a file (source ‚Üí destination)",
            "command-emoji":"üì•",
             "action": {
                "type": "function",
                "handler": "(lambda: (print(f'Downloading {cmd_parts} -> {(other_parts[0] if other_parts and os.path.splitext(other_parts[0])[1] else os.path.join(other_parts[0], os.path.basename(cmd_parts)) if other_parts and other_parts[0] and os.path.isdir(other_parts[0]) else os.path.basename(cmd_parts))}...'), (lambda raw_content, target_path: ((lambda content: (open(target_path, 'wb').write(content) if isinstance(content, bytes) else open(target_path, 'w', encoding='utf-8').write(content)))((lambda: ((__import__('ast').literal_eval(raw_content)) if isinstance(raw_content, str) and raw_content.startswith(('b\"', \"b'\", 'b\"', \"b'\")) else raw_content))())))(con.connect(cli='cat', path=cmd_parts), (other_parts[0] if other_parts and os.path.splitext(other_parts[0])[1] else os.path.join(other_parts[0], os.path.basename(cmd_parts)) if other_parts and other_parts[0] and os.path.isdir(other_parts[0]) else os.path.basename(cmd_parts))), print(f'Download done: {cmd_parts} -> {(other_parts[0] if other_parts and os.path.splitext(other_parts[0])[1] else os.path.join(other_parts[0], os.path.basename(cmd_parts)) if other_parts and other_parts[0] and os.path.isdir(other_parts[0]) else os.path.basename(cmd_parts))}')) if True else None)() if True else (print(f'Download error'), None)"
            },
            "parameters": {},
            "output": false,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "up":{
            "command-file": "up.py",
            "command-arguments": {"file":"__file__","path":"__path__","new_name":"__new_name__","data":"__data__"},
            "command-default": {"old_path":"{self.SCRIPT_FILENAME}"},
            "command-description": "[up] [SRC] [DST] ‚Üí Upload a file (local ‚Üí target path)",
            "command-emoji":"üì§",
             "action": {
                "type": "function",
                "handler": "con.connect(cli='up', data=base64.b64encode(open(cmd_parts, 'rb').read()).decode('utf-8') ,file=cmd_parts, path=pwd, new_name=other_parts[0])"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "-v": {
            "command-description": "Show the current version and package details",
            "command-emoji":"üì¶",
            "action": {
                "type": "function",
                "handler": "con.info('__version__','__source__','__package_version__','__package_source__','__author__')"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "-h": {
            "command-description": "Show available commands and usage information",
            "command-emoji":"‚ùì",
            "action": {
                "type": "function",
                "handler": "con.help('pkg')"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "-hole": {
            "command-description": "Retrieve the WebHole source code",
            "command-emoji":"üï≥Ô∏è",
            "action": {
                "type": "function",
                "handler": "con.hole(pkg=cmd_parts,nkey=NKEY)"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "-pkgs": {
            "command-description": "List all installed packages",
            "command-emoji":"üìö",
            "action": {
                "type": "function",
                "handler": "con.pkgs()"
            },
            "parameters": {},
            "output": true,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "cls": {
            "command-description": "Clear the terminal screen",
            "command-emoji":"üßπ",
            "action": {
                "type": "function",
                "handler": "os.system('cls' if os.name=='nt' else 'clear')"
            },
            "parameters": {},
            "output": false,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "exit": {
            "command-description": "Exit the application",
            "command-emoji":"üö™",
            "action": {
                "type": "function",
                "handler": "(lambda: (print('Exiting WebHole...'), exit()))()"
            },
            "parameters": {},
            "output": false,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        },
        "-r": {
            "command-description": "Reflesh the application",
            "command-emoji":"üîÑ",
            "action": {
                "type": "function",
                "handler": "(globals().update(con=webhole(url=URL, user_key=KEY)), globals().update(pwd=con.connect(value='pwd')), globals().update(config_data=con.config()), print('‚úÖ Refreshed Successfully!'))"
            },
            "parameters": {},
            "output": false,
            "post_execute": false,
            "return_list": false,
            "with_function": false
        }
    },
    "values": {
        "pwd": {
            "value-get":"{self.SCRIPT_FILENAME}"
        },
        "package_name": {
            "value-get":"{self.package_name}"
        },
        "package_version": "0.0.2-beta",
        "author":"Author : YasserBdj96\nEmail  : yasserbdj96@gmail.com",
        "package_source":"https://github.com/yasserbdj96/WebHole/tree/main/webhole/packages/python-flask"
    },
    "hole-code":"hole.py",
    "logo": [
            "",
            "    ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó",
            "    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù",
            "    ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ",
            "    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ",
            "    ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó",
            "     ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù",
            "",
            "    ‚ö°   WebHole -  P Y T H O N ‚Ä¢ F L A S K  (v__package_version__)   ‚ö°",
            "",
            "   +‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ+",
            "      üõ†Ô∏è Coded by  : __author__ ",
            "      üåê Website   : https://yasserbdj96.github.io/ ",
            "      üìÇ Source    : __source__ ",
            "      üì¶ Build     : __version__ ",
            "      üí∞ USDT      : __usdt__ ",
            "      üí∞ PAYPAL    : __paypal__ ",
            "      üö® Disclaimer: **FOR AUTHORIZED USE ONLY**",
            "   +‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ+",
            ""
        ],
    "logo_color": {
        "‚ñà": "c_green",
        "‚ïê": "c_yellow",
        "‚ïö": "c_yellow",
        "‚ïù": "c_yellow",
        "‚ïó": "c_yellow",
        "‚ïî": "c_yellow",
        "‚ïë": "c_yellow",
        "‚îÄ": "c_yellow",
        "+": "c_yellow"

    }
}
